{"version":3,"sources":["models/life.js","components/World.jsx","components/Counter.jsx","App.jsx","index.js"],"names":["advance","world","map","xArray","y","yArray","isAlive","x","neighborCount","entry","length","getSingleNeighbor","filter","countNeighbors","checkCell","generateRandomWorld","height","width","Array","fill","Math","floor","random","World","rows","cells","classes","key","className","Counter","reduce","a","b","concat","countLiveCells","App","props","togglePause","setState","state","active","this","moveAStep","setTimeout","buttonText","onClick","Component","ReactDOM","render","document","getElementById"],"mappings":"qSAUO,SAASA,EAAQC,GACtB,OAAOA,EAAMC,KAAI,SAACC,EAAQC,EAAGC,GAAZ,OACfF,EAAOD,KAAI,SAACI,EAASC,GAAV,OAIf,SAAmBD,EAASL,EAAOM,EAAGH,GACpC,IAAMI,EAcR,SAAwBP,EAAOM,EAAGH,GAYhC,MAXmB,CACjB,CAACA,EAAI,EAAGG,EAAI,GACZ,CAACH,EAAGG,EAAI,GACR,CAACH,EAAI,EAAGG,EAAI,GACZ,CAACH,EAAI,EAAGG,GACR,CAACH,EAAI,EAAGG,GACR,CAACH,EAAI,EAAGG,EAAI,GACZ,CAACH,EAAGG,EAAI,GACR,CAACH,EAAI,EAAGG,EAAI,IAIXL,KAAI,SAAAO,GAAK,OAId,SAA2BR,EAAOG,EAAGG,GAC/BH,EAAI,IACNA,EAAIH,EAAMS,OAAS,GAGjBH,EAAI,IACNA,EAAIN,EAAM,GAAGS,OAAS,GAGpBN,GAAKH,EAAMS,SACbN,EAAI,GAGFG,GAAKN,EAAMG,GAAGM,SAChBH,EAAI,GAGN,OAAON,EAAMG,GAAGG,GArBAI,CAAkBV,EAAOQ,EAAM,GAAIA,EAAM,OACtDG,QAAO,SAAAH,GAAK,OAAIA,KAAOC,OA5BJG,CAAeZ,EAAOM,EAAGH,GAE/C,GAAIE,EACF,OAAIE,EAAgB,GAAKA,EAAgB,EAChC,EAEF,EAET,GAAsB,IAAlBA,EACF,OAAO,EAET,OAAO,EAhBsBM,CAAUR,EAASL,EAAOM,EAAGH,SAwDrD,SAASW,EAAoBC,EAAQC,GAC1C,OAAO,IAAIC,MAAMF,GACdG,OACAjB,KAAI,SAAAO,GAAK,OAAI,IAAIS,MAAMD,GAAOE,OAAOjB,KAAI,SAAAO,GAAK,OAI1CW,KAAKC,MAAsB,EAAhBD,KAAKE,gB,UC/CVC,EAxBD,SAAC,GAAe,IACtBC,EADqB,EAAZvB,MACIC,KAAI,SAACC,EAAQC,EAAGC,GACjC,IAAMoB,EAAQtB,EAAOD,KAAI,SAACI,EAASC,GACjC,IAAImB,EAAU,aACVpB,IACFoB,GAAW,UAEb,IAAMC,EAAG,UAAMpB,EAAN,YAAWH,GACpB,OAAO,yBAAKuB,IAAKA,EAAKC,UAAWF,OAEnC,OACE,yBAAKC,IAAKvB,EAAGwB,UAAU,aACpBH,MAKP,OAAO,yBAAKG,UAAU,SAASJ,ICTlBK,EARC,SAAC,GAAD,IAAG5B,EAAH,EAAGA,MAAH,OACd,sDFyEK,SAAwBA,GAC7B,OAAOA,EAAM6B,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,OAAOD,MAAIF,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KE1EpCE,CAAejC,KCyC9BkC,E,kDApCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAWRC,YAAc,WACZ,EAAKC,UAAS,SAAAC,GAAK,MAAK,CAAEC,QAAS,EAAKD,MAAMC,YAX9C,EAAKD,MAAQ,CACXtC,MAAOc,EARE,GACD,IAQRyB,QAAQ,GAJO,E,gEASjBC,KAAKC,c,kCAOM,IAAD,OACND,KAAKF,MAAMC,QACbC,KAAKH,UAAS,SAAAC,GAAK,MAAK,CAAEtC,MAAOD,EAAQuC,EAAMtC,WAEjD0C,YAAW,kBAAM,EAAKD,cAvBS,M,+BA2B/B,IAAME,EAAaH,KAAKF,MAAMC,OAAS,QAAU,OACjD,OACE,yBAAKZ,UAAU,aACb,kDACA,kBAAC,EAAD,CAAS3B,MAAOwC,KAAKF,MAAMtC,QAC3B,4BAAQ4C,QAASJ,KAAKJ,aAAcO,GACpC,kBAAC,EAAD,CAAO3C,MAAOwC,KAAKF,MAAMtC,a,GA/Bf6C,a,YCHlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.80f0a7c1.chunk.js","sourcesContent":["/*\nEvery cell interacts with its eight neighbours, which are the cells that are horizontally, vertically,\nor diagonally adjacent. At each step in time, the following transitions occur:\n\nAny live cell with fewer than two live neighbours dies, as if caused by underpopulation.\nAny live cell with two or three live neighbours lives on to the next generation.\nAny live cell with more than three live neighbours dies, as if by overpopulation.\nAny dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.\n*/\n\nexport function advance(world) {\n  return world.map((xArray, y, yArray) =>\n    xArray.map((isAlive, x) => checkCell(isAlive, world, x, y))\n  );\n}\n\nfunction checkCell(isAlive, world, x, y) {\n  const neighborCount = countNeighbors(world, x, y);\n\n  if (isAlive) {\n    if (neighborCount < 2 || neighborCount > 3) {\n      return 0;\n    }\n    return 1;\n  }\n  if (neighborCount === 3) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction countNeighbors(world, x, y) {\n  const candidates = [\n    [y - 1, x - 1],\n    [y, x - 1],\n    [y + 1, x - 1],\n    [y - 1, x],\n    [y + 1, x],\n    [y - 1, x + 1],\n    [y, x + 1],\n    [y + 1, x + 1],\n  ];\n\n  return candidates\n    .map(entry => getSingleNeighbor(world, entry[0], entry[1]))\n    .filter(entry => entry).length;\n}\n\nfunction getSingleNeighbor(world, y, x) {\n  if (y < 0) {\n    y = world.length - 1;\n  }\n\n  if (x < 0) {\n    x = world[0].length - 1;\n  }\n\n  if (y >= world.length) {\n    y = 0;\n  }\n\n  if (x >= world[y].length) {\n    x = 0;\n  }\n\n  return world[y][x];\n}\n\nexport function generateRandomWorld(height, width) {\n  return new Array(height)\n    .fill()\n    .map(entry => new Array(width).fill().map(entry => generateRandomCell()));\n}\n\nfunction generateRandomCell() {\n  return Math.floor(Math.random() * 2);\n}\n\nexport function countLiveCells(world) {\n  return world.reduce((a, b) => a.concat(b)).reduce((a, b) => a + b);\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../css/world.css';\n\nconst World = ({ world }) => {\n  const rows = world.map((xArray, y, yArray) => {\n    const cells = xArray.map((isAlive, x) => {\n      let classes = 'world-cell';\n      if (isAlive) {\n        classes += ' alive';\n      }\n      const key = `${x}:${y}`;\n      return <div key={key} className={classes} />;\n    });\n    return (\n      <div key={y} className=\"world-row\">\n        {cells}\n      </div>\n    );\n  });\n\n  return <div className=\"world\">{rows}</div>;\n};\n\nWorld.propTypes = {\n  world: PropTypes.array.isRequired,\n};\n\nexport default World;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { countLiveCells } from '../models/life';\n\nconst Counter = ({ world }) => (\n  <div>Number of live cells: {countLiveCells(world)}</div>\n);\n\nCounter.propTypes = {\n  world: PropTypes.array.isRequired,\n};\n\nexport default Counter;\n","import React, { Component } from 'react';\nimport { advance, generateRandomWorld } from './models/life';\nimport World from './components/World';\nimport Counter from './components/Counter';\n\nconst HEIGHT = 40;\nconst WIDTH = 40;\nconst MILLESECONDS_BETWEEN_STEPS = 10;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      world: generateRandomWorld(HEIGHT, WIDTH),\n      active: true,\n    };\n  }\n\n  componentDidMount() {\n    this.moveAStep();\n  }\n\n  togglePause = () => {\n    this.setState(state => ({ active: !this.state.active }));\n  };\n\n  moveAStep() {\n    if (this.state.active) {\n      this.setState(state => ({ world: advance(state.world) }));\n    }\n    setTimeout(() => this.moveAStep(), MILLESECONDS_BETWEEN_STEPS);\n  }\n\n  render() {\n    const buttonText = this.state.active ? 'Pause' : 'Play';\n    return (\n      <div className=\"container\">\n        <h1>React Game of Life</h1>\n        <Counter world={this.state.world} />\n        <button onClick={this.togglePause}>{buttonText}</button>\n        <World world={this.state.world} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./css/normalize.css\";\nimport \"./css/skeleton.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}